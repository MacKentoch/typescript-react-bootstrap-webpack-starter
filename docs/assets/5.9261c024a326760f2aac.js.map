{"version":3,"sources":["webpack:///./src/front/components/privateRoute/PrivateRoute.tsx","webpack:///./src/front/components/privateRoute/index.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,kBAAkB;AACuB;AACU;AAanD,aAAa;AAEb,SAAS,YAAY,CAAC,KAAY;IACxB,oCAAyB,EAAE,yEAAO,CAAW;IAErD,IAAM,SAAS,GAAG;QACR,mDAAmB,CAAW;QACtC,IAAM,SAAS,GAAG,mBAAmB,EAAE,CAAC;QACxC,OAAO,SAAS,CAAC;IACnB,CAAC,CAAC;IAEF,IAAM,WAAW,GAAG,UAAC,UAAe;QAC1B,kCAAQ,EAAE,4CAAe,CAAgB;QACjD,IAAM,cAAc,GAAG,KAAK,CAAC,CAAC,mBAAmB;QAEjD,OAAO,CAAC,cAAc,IAAI,eAAe,CAAC,CAAC,CAAC,CAC1C,2DAAC,cAAc,qDAAK,UAAU,EAAI,CACnC,CAAC,CAAC,CAAC,CACF,2DAAC,yDAAQ,IAAC,EAAE,EAAE,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAE,GAAI,CACpE,CAAC;IACJ,CAAC,CAAC;IAEF,OAAO,2DAAC,sDAAK,qDAAK,IAAI,IAAE,MAAM,EAAE,WAAW,IAAI,CAAC;AAClD,CAAC;AAED,YAAY,CAAC,WAAW,GAAG,cAAc,CAAC;AAE3B,2EAAY,EAAC;;;;;;;;;;;;;AC1C5B;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAkB;AACc;AACc;AACJ;AACa;AACvD,aAAa;AAEE,oHAAO,CACpB,2DAAU,EACV,0EAAQ,EAAE,CACX,CAAC,qDAAY,CAAC,EAAC","file":"5.9261c024a326760f2aac.js","sourcesContent":["// #region imports\nimport React, { Component } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { AuthContextProps } from '../../contexts/auth/consumerHOC';\n// #endregion\n\n// #region flow types\ninterface Props extends RouteComponentProps<any>, AuthContextProps {\n  // parent\n  component: any;\n  path: string;\n}\n\ninterface State {}\n// #endregion\n\nfunction PrivateRoute(props: Props) {\n  const { component: InnerComponent, ...rest } = props;\n\n  const isExpired = () => {\n    const { checkTokenIsExpired } = props;\n    const isExpired = checkTokenIsExpired();\n    return isExpired;\n  };\n\n  const renderScene = (sceneProps: any) => {\n    const { location, isAuthenticated } = sceneProps;\n    const isTokenExpired = false; // this.isExpired()\n\n    return !isTokenExpired && isAuthenticated ? (\n      <InnerComponent {...sceneProps} />\n    ) : (\n      <Redirect to={{ pathname: '/login', state: { from: location } }} />\n    );\n  };\n\n  return <Route {...rest} render={renderScene} />;\n}\n\nPrivateRoute.displayName = 'PrivateRoute';\n\nexport default PrivateRoute;\n","// #region imports\nimport { compose } from 'redux';\nimport { withRouter } from 'react-router-dom';\nimport PrivateRoute from './PrivateRoute';\nimport withAuth from '../../contexts/auth/consumerHOC';\n// #endregion\n\nexport default compose(\n  withRouter,\n  withAuth(),\n)(PrivateRoute);\n"],"sourceRoot":""}