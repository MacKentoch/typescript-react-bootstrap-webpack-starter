{"version":3,"sources":["webpack:///./src/front/components/privateRoute/PrivateRoute.js","webpack:///./src/front/components/privateRoute/index.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA,QAAQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAER,kBAAkB;AACuB;AACsB;AAwB/D,aAAa;AAEb;IAA2B,gCAAuB;IAAlD;;IA4BA,CAAC;IA3BC,oBAAoB;IACpB,6BAAM,GAAN;QACE,IAAM,eAAmD,EAAjD,6BAAyB,EAAE,gCAAsB,CAAC;QACpD,mBAA0C,EAAxC,sBAAQ,EAAE,oCAAe,CAAgB;QAEjD,IAAM,cAAc,GAAG,KAAK,CAAC,CAAC,oBAAoB;QAElD,OAAO,CACL,2DAAC,sDAAK,eACA,IAAI,IACR,MAAM,EAAE,eAAK;gBACX,QAAC,cAAc,IAAI,eAAe,CAAC,CAAC,CAAC,CACnC,2DAAC,cAAc,eAAK,KAAK,EAAI,CAC9B,CAAC,CAAC,CAAC,CACF,2DAAC,yDAAQ,IAAC,EAAE,EAAE,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAE,GAAI,CACpE;YAJD,CAIC,IAEH,CACH,CAAC;IACJ,CAAC;IACD,aAAa;IAEb,gCAAS,GAAT;QACU,wDAAmB,CAAgB;QAC3C,IAAM,SAAS,GAAG,mBAAmB,EAAE,CAAC;QACxC,OAAO,SAAS,CAAC;IACnB,CAAC;IACH,mBAAC;AAAD,CAAC,CA5B0B,+CAAS,GA4BnC;AAEc,kIAAU,CAAC,YAAY,CAAC,EAAC;;;;;;;;;;;;;AC5DxC;AAAA;AAAA;AAAA;AAAA;AAAA,QAAQ;AAER,kBAAkB;AACsB;AACE;AACa;AACvD,aAAa;AAEE,uHAAO,CAAC,0EAAQ,EAAE,CAAC,CAAC,qDAAY,CAAC,EAAC","file":"5.36018700d595dd0dd301.js","sourcesContent":["// @flow\n\n// #region imports\nimport React, { Component } from 'react';\nimport { Route, Redirect, withRouter } from 'react-router-dom';\nimport {\n  type Match,\n  type Location,\n  type RouterHistory,\n} from 'react-router-dom';\nimport { type AuthContextProps } from '../../contexts/auth/consumerHOC';\n// #endregion\n\n// #region flow types\ntype Props = {\n  // react-router 4:\n  match: Match,\n  location: Location,\n  history: RouterHistory,\n\n  // parent\n  component: any,\n  path: string,\n\n  ...any,\n} & AuthContextProps;\n\ntype State = any;\n// #endregion\n\nclass PrivateRoute extends Component<Props, State> {\n  // #region lifecycle\n  render() {\n    const { component: InnerComponent, ...rest } = this.props;\n    const { location, isAuthenticated } = this.props;\n\n    const isTokenExpired = false; // this.isExpired();\n\n    return (\n      <Route\n        {...rest}\n        render={props =>\n          !isTokenExpired && isAuthenticated ? (\n            <InnerComponent {...props} />\n          ) : (\n            <Redirect to={{ pathname: '/login', state: { from: location } }} />\n          )\n        }\n      />\n    );\n  }\n  // #endregion\n\n  isExpired() {\n    const { checkTokenIsExpired } = this.props;\n    const isExpired = checkTokenIsExpired();\n    return isExpired;\n  }\n}\n\nexport default withRouter(PrivateRoute);\n","// @flow\n\n// #region imports\nimport compose from 'recompose/compose';\nimport PrivateRoute from './PrivateRoute';\nimport withAuth from '../../contexts/auth/consumerHOC';\n// #endregion\n\nexport default compose(withAuth())(PrivateRoute);\n"],"sourceRoot":""}